--// Exploit Fix \--
if not pcall(function() return syn.protect_gui end) then
    syn = {}
    syn.protect_gui = function(gui)
        gui.Parent = game:GetService("CoreGui")
    end
end

-- Load Libraries
local Library = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/preztel/AzureLibrary/master/uilib.lua", true))()
local ESP = loadstring(game:HttpGetAsync("https://pastebin.com/raw/SnMPYbAW"))()

-- Variables
local Parts = {"Head", "Torso"}
local camera = game.Workspace.CurrentCamera
local player = game.Players.LocalPlayer
local mouse = player:GetMouse()

local aim = false
local aims = false
local teamCheckAim = false
local partChosen = "Head"

-- ESP Settings
ESP.Players = false
ESP.Boxes = false
ESP.Names = false
ESP.TeamColor = false
ESP.Tracers = false
ESP:Toggle(true)

-- Smooth Aiming Variables
local aimSmoothness = 0.2

--// Function to find the closest player based on team check \--
local function getClosestPlayer(teamCheck)
    local closestPlayer = nil
    local shortestDist = math.huge

    for _, plr in pairs(game.Players:GetPlayers()) do
        if plr ~= player and plr.Character and plr.Character:FindFirstChild("Humanoid") and plr.Character:FindFirstChild("HumanoidRootPart") then
            if not teamCheck or plr.TeamColor ~= player.TeamColor then
                local screenPoint = camera:WorldToScreenPoint(plr.Character.HumanoidRootPart.Position)
                local distance = (Vector2.new(mouse.X, mouse.Y) - Vector2.new(screenPoint.X, screenPoint.Y)).Magnitude

                if distance < shortestDist then
                    closestPlayer = plr
                    shortestDist = distance
                end
            end
        end
    end
    return closestPlayer
end

--// Smooth Aiming Function \--
local function smoothAimAt(targetPosition)
    local currentPos = camera.CFrame.Position
    local direction = (targetPosition - currentPos).unit
    local newPos = currentPos + direction * (aimSmoothness * (targetPosition - currentPos).magnitude)
    camera.CFrame = CFrame.new(newPos, targetPosition)
end

--// Aimbot Logic \--
local function aimAtTarget(target)
    if target and target.Character then
        local aimPart = target.Character:FindFirstChild(partChosen) or target.Character:FindFirstChild("UpperTorso")
        if aimPart then
            smoothAimAt(aimPart.Position)
        end
    end
end

--// Input Handling \--
local aimConnection = nil

local function startAimbot()
    if aimConnection then aimConnection:Disconnect() end -- Disconnect previous aim loop if it exists

    aimConnection = game:GetService("UserInputService").InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton2 and aim then
            aims = true
            while aims and wait() do
                local target = getClosestPlayer(teamCheckAim)
                if target then
                    aimAtTarget(target)
                end
            end
        end
    end)

    game:GetService("UserInputService").InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton2 then
            aims = false
        end
    end)
end

--// GUI Settings \--
local AimbotSection = Library:CreateTab("Aimbot Section", "This is where you turn on aimbot.", true)
local PlayerTab = Library:CreateTab("Player ESP", "This is where you modify the Player ESP.", true)

-- ESP Toggles
PlayerTab:CreateToggle("Enable ESP", function(state)
    ESP.Players = state
end)

PlayerTab:CreateToggle("Boxes", function(state)
    ESP.Boxes = state
end)

PlayerTab:CreateToggle("Tracers", function(state)
    ESP.Tracers = state
end)

PlayerTab:CreateToggle("Names", function(state)
    ESP.Names = state
end)

PlayerTab:CreateToggle("Distance", function(state)
    ESP.Distance = state
end)

PlayerTab:CreateToggle("Teamcheck", function(state)
    ESP.TeamMates = not state
end)

PlayerTab:CreateToggle("Team Color", function(state)
    ESP.TeamColor = state
end)

-- Aimbot Settings
AimbotSection:CreateDropDown("Aim Part", Parts, function(selectedPart)
    partChosen = selectedPart
end)

AimbotSection:CreateToggle("Teamcheck", function(state)
    teamCheckAim = state
end)

AimbotSection:CreateToggle("Aimbot", function(state)
    aim = state
    if aim then
        startAimbot()
    else
        if aimConnection then
            aimConnection:Disconnect()
        end
        aims = false
    end
end)

-- Optional: Set smoothness of the aimbot
AimbotSection:CreateSlider("Aim Smoothness", 0.1, 1, 0.2, function(value)
    aimSmoothness = value
end)
